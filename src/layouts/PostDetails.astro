---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import PostMetadata from "@components/PostMetadata";
import type { CollectionEntry } from "astro:content";
import { Icon } from "astro-icon/components";
import { slugifyStr } from "@utils/slugify";
import ShareLinks from "@components/ShareLinks.astro";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;
const { title, author, description, ogImage, pubDatetime, modDatetime, tags } =
  post.data;
const { Content, remarkPluginFrontmatter } = await post.render();
const frontmatter = remarkPluginFrontmatter as CollectionEntry<"blog">["data"];
const slug = post.slug;

//const ogUrl = new URL(ogImage ? ogImage : `${title}.svg`, Astro.url.origin).href;
---

<Layout
  title=`${title} | ${SITE.title}`
  ,
  author={author}
  description={description}
  ogImage={ogImage}
  postSlug={slug}
  scrollSmooth={true}
>
  <Header />
  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex items-center hover:opacity-75"
      onclick="(() => (history.length === 1) ? window.location = '/' : history.back())()"
    >
      <Icon name="tabler:arrow-narrow-left" class="h-5 w-5" />
      <span class="ml-2">Go back</span>
    </button>
  </div>
  <main id="main-content">
    <h1 class="post-title">{title}</h1>
    <PostMetadata
      pubDatetime={pubDatetime}
      modDatetime={modDatetime}
      readingTime={frontmatter.readingTime!}
      size="lg"
    />
    <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
      <Content />
    </article>
    <div class="mt-8 flex flex-row flex-wrap">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} />)}
    </div>
    <div class="mt-8">
      <ShareLinks />
    </div>
    <div class="giscus mt-8"></div>
    <button
      id="back-to-top"
      class="focus-outline whitespace-nowrap hover:opacity-75 mt-8"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="rotate-90">
        <path
          d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"
        ></path>
      </svg>
      <span>Back to Top</span>
    </button>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent sm:text-3xl;
  }
</style>

<script is:inline>
  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
</script>
